<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-3.2.xsd"
		>
		
	<!-- 注解自动扫描 -->
	<context:component-scan base-package="demo.cache" />
	
	<!-- springContextHolder -->
	<bean id="springContextHolder" class="demo.cache.spring.SpringContextHolder" lazy-init="false" />

	<!-- 1.数据源 DriverManagerDataSource -->
	<!-- 为简单化此处直接显式给出，不从外部文件加载 -->
	
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="url" value="jdbc:mysql://127.0.0.1:3306/teaching" />
		<property name="username" value="root" />
		<property name="password" value="123456" />
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
	</bean>

	<!-- 2. mybatis的SqlSession工厂 SqlSessionFactoryBean
			dataSource 引用数据源
			typeAliasespackage 扫描实体类的包名，自动映射实体类的别名
	-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="mapperLocations" value="classpath:mapper/*Mapper.xml" />
		<property name="typeAliasesPackage" value="demo.model"/>
	</bean>
	
	<!-- 3. mybatis自动扫描加载Sql映射文件 MapperScannerConfigure
			basePackage :指定Sql映射文件/接口所在的包（自动扫描）
			sqlSessionFactory : 引用已定义的sqlSessionFactory
	-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
	
		<property name="basePackage" value="demo.dao" />
		<property name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>

	<!-- 4.事务管理 DataSourceTrancationManager
			dataSource 引用已定义的数据源
	-->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>

	<!-- 5.使用声明式事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"/>

</beans>
